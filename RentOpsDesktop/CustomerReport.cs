using Microsoft.EntityFrameworkCore;
using RentOpsObjects.Model;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Runtime.InteropServices.JavaScript.JSType;
using PdfSharp.Pdf;
using PdfSharp.Drawing;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.ListView;
using System.Diagnostics;
using PdfSharp.Drawing.Layout;
using RentOpsObjects.Services;
using RentOpsObjects.Services;

namespace RentOpsDesktop
{
    public partial class CustomerReport : Form
    {
        RentOpsDBContext dbContext;
        int currentUserId;
        AuditLogger logger;
        bool isLoaded;
        public CustomerReport()
        {
            InitializeComponent();
            dbContext = new RentOpsDBContext();
            logger = new AuditLogger(dbContext); //create a logger object
            currentUserId = Global.user.UserId;
        }

        private void btnGenerateCustomerReport_Click(object sender, EventArgs e)
        {

            try
            {
                //will generate pdf report about customers

                //fetch current employee name 
                

                int employeeID = currentUserId;
                string employeeName = "mohammed";

                //create a string for the report header
                string reportHeaderBlock = $@"Customer Report
 
 
Date:{DateTime.Today.Date}              Generated by: {employeeID} {employeeName}
 
All Customers
*********
 
Total Number of Registered Customers: {dbContext.ExternalCustomers.Count() + dbContext.Users.Where(i => i.RoleId == 3).Count()}
Number of Customer Feedbacks on Equipment: {dbContext.Feedbacks.Count()}
 
Customer Details
*********
";

                //create a list for customer details (block-by-block)
                List<string> customerDetailsBlocks = new List<string>();

                // Add header block as first block
                customerDetailsBlocks.Add(reportHeaderBlock);

                var customers = dbContext.ExternalCustomers.ToList();

                //external customers loop
                foreach (var customer in customers)
                {
                    //create customer details block
                    string block = $@"Customer ID: {customer.CustomerId}  
Customer Name: {customer.FirstName + " " + customer.LastName}  
Email: {customer.Email}  
Phone Number: {customer.PhoneNumber}
";

                    //fetch the customer rental statistics
                    int numberOfRentalRequests = dbContext.RentalTransactions.Where(i => i.CustomerId == customer.CustomerId).Count();
                    int numberOfRentalTransactions = dbContext.RentalTransactions.Where(i => i.CustomerId == customer.CustomerId).Count();
                    int numberOfReturnRecords = dbContext.ReturnRecords
                        .Include(r => r.RentalTransaction)
                        .Where(r => r.RentalTransaction.CustomerId == customer.CustomerId)
                        .Count();
                    int numberOfActiveRentals = dbContext.RentalTransactions.Where(i => i.CustomerId == customer.CustomerId && i.PickupDate <= DateOnly.FromDateTime(DateTime.Today.Date) && i.ReturnDate >= DateOnly.FromDateTime(DateTime.Today.Date)).Count();
                    int numberOfLateReturns = dbContext.ReturnRecords
                        .Include(r => r.RentalTransaction)
                        .Where(r => r.RentalTransaction.CustomerId == customer.CustomerId && r.LateReturnFee != 0)
                        .Count();
                    int numberOfDamagedReturns = dbContext.ReturnRecords
                        .Include(r => r.RentalTransaction)
                        .Where(r => r.RentalTransaction.CustomerId == customer.CustomerId && r.ReturnConditionId == 2).Count();
                    int numberOfBrokenReturns = dbContext.ReturnRecords
                        .Include(r => r.RentalTransaction)
                        .Where(r => r.RentalTransaction.CustomerId == customer.CustomerId && r.ReturnConditionId == 3).Count();
                    int numberOfLostReturns = dbContext.ReturnRecords
                        .Include(r => r.RentalTransaction)
                        .Where(r => r.RentalTransaction.CustomerId == customer.CustomerId && r.ReturnConditionId == 4).Count();

                    //add the customer rental details to the block
                    block += $@"Number of Rental Transactions: {numberOfRentalTransactions}
Number of Return Records: {numberOfReturnRecords}
Number of Active Rentals: {numberOfActiveRentals}
Number of Late Returns: {numberOfLateReturns}
Number of Damaged Returns: {numberOfDamagedReturns}
Number of Broken Returns: {numberOfBrokenReturns}
Number of Lost Returns: {numberOfLostReturns}

*********
";

                    customerDetailsBlocks.Add(block);
                }

                var websiteCustomers = dbContext.Users.Where(u => u.RoleId == 3).ToList();

                //Website customers loop
                foreach (var customer in websiteCustomers)
                {
                    //create customer details block
                    string block = $@"Customer ID: {customer.UserId}  
Customer Name: {customer.FirstName + " " + customer.LastName}  
Email: {customer.Email}  
Phone Number: {customer.PhoneNumber}";

                    //fetch the customer rental statistics
                    int numberOfRentalRequests = dbContext.RentalRequests
                        .Where(i => i.UserId == customer.UserId).Count();
                    int numberOfRentalTransactions = dbContext.RentalTransactions
                        .Include(r => r.RentalRequest)
                        .Where(i => i.RentalRequest.UserId == customer.UserId).Count();
                    int numberOfReturnRecords = dbContext.ReturnRecords
                        .Include(r => r.RentalTransaction)
                        .Where(r => r.RentalTransaction.CustomerId == customer.UserId)
                        .Count();
                    int numberOfActiveRentals = dbContext.RentalTransactions
                        .Include(r => r.RentalRequest)
                        .Where(i => i.RentalRequest.UserId == customer.UserId && i.PickupDate <= DateOnly.FromDateTime(DateTime.Today.Date) && i.ReturnDate >= DateOnly.FromDateTime(DateTime.Today.Date)).Count();
                    int numberOfLateReturns = dbContext.ReturnRecords
                        .Include(r => r.RentalTransaction)
                        .ThenInclude(r => r.RentalRequest)
                        .Where(r => r.RentalTransaction.RentalRequest.UserId == customer.UserId && r.LateReturnFee != 0)
                        .Count();
                    int numberOfDamagedReturns = dbContext.ReturnRecords
                        .Include(r => r.RentalTransaction)
                        .ThenInclude(r => r.RentalRequest)
                        .Where(r => r.RentalTransaction.RentalRequest.UserId == customer.UserId && r.ReturnConditionId == 2).Count();
                    int numberOfBrokenReturns = dbContext.ReturnRecords
                        .Include(r => r.RentalTransaction)
                        .ThenInclude(r => r.RentalRequest)
                        .Where(r => r.RentalTransaction.RentalRequest.UserId == customer.UserId && r.ReturnConditionId == 3).Count();
                    int numberOfLostReturns = dbContext.ReturnRecords
                        .Include(r => r.RentalTransaction)
                        .ThenInclude(r => r.RentalRequest)
                        .Where(r => r.RentalTransaction.RentalRequest.UserId == customer.UserId && r.ReturnConditionId == 4).Count();

                    //add the customer rental details to the block
                    block += $@"
Number of Rental Requests: {numberOfRentalRequests}
Number of Rental Transactions: {numberOfRentalTransactions}
Number of Return Records: {numberOfReturnRecords}
Number of Active Rentals: {numberOfActiveRentals}
Number of Late Returns: {numberOfLateReturns}
Number of Damaged Returns: {numberOfDamagedReturns}
Number of Broken Returns: {numberOfBrokenReturns}
Number of Lost Returns: {numberOfLostReturns}
*********
 
";

                    customerDetailsBlocks.Add(block);
                }

                //create a pdf document
                PdfDocument document = new PdfDocument();
                //set the document title
                document.Info.Title = "CustomerReport";

                XFont font = new XFont("Verdana", 10);
                double marginTop = 50;
                double marginLeft = 40;
                double marginRight = 40;
                double marginBottom = 50;

                double yPoint = marginTop;
                double lineHeight = font.GetHeight();

                //create the first page
                PdfPage page = document.AddPage();
                XGraphics gfx = XGraphics.FromPdfPage(page);
                XTextFormatter tf = new XTextFormatter(gfx);

                // Loop through blocks and paginate
                foreach (var block in customerDetailsBlocks)
                {
                    int blockLines = block.Split('\n').Length;
                    double blockHeight = blockLines * lineHeight;

                    if (yPoint + blockHeight > page.Height - marginBottom)
                    {
                        // Add a new page
                        page = document.AddPage();
                        gfx = XGraphics.FromPdfPage(page);
                        tf = new XTextFormatter(gfx);
                        yPoint = marginTop;
                    }

                    tf.DrawString(block, font, XBrushes.Black, new XRect(marginLeft, yPoint, page.Width - marginLeft - marginRight, page.Height - marginBottom), XStringFormats.TopLeft);
                    yPoint += blockHeight;
                }

                //create a new document object in the database 
                string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

                Document newDocument = new Document();
                newDocument.UploadDate = DateTime.Now;
                newDocument.FileTypeId = 1; //customer report
                newDocument.UserId = employeeID; //current employee

                // Save relative path in the database and save PDF in correct project folder
                string baseDir = AppDomain.CurrentDomain.BaseDirectory;
                string projectRoot = Path.Combine(baseDir, @"..\..\..");
                string folderPath = Path.GetFullPath(Path.Combine(projectRoot, "Reports", "CustomerReports"));
                Directory.CreateDirectory(folderPath);

                string relativePath = Path.Combine("Reports", "CustomerReports", $"CustomerReport_{timestamp}.pdf");
                string filename = Path.Combine(folderPath, $"CustomerReport_{timestamp}.pdf");

                // Save the document
                document.Save(filename);
                newDocument.StoragePath = relativePath; // save relative path now
                newDocument.FileName = $"CustomerReport_{timestamp}.pdf"; //name of the document
                newDocument.FileData = File.ReadAllBytes(filename); //file data

                //add the document to the database
                dbContext.Documents.Add(newDocument);
                dbContext.SaveChanges();

                // Show the dialog with Open option
                DialogResult result = MessageBox.Show("Customer report has been generated successfully!\n\nDo you want to open the file now?", "Report Created", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (result == DialogResult.Yes)
                {

                    //refresh the document list in the combobox
                    cmbCustomerReports.DataSource = dbContext.Documents
                        .Where(d => d.FileTypeId == 1).ToList();


                    // Open the file automatically if user clicks "Yes"
                    System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo()
                    {
                        FileName = filename,
                        UseShellExecute = true
                    });
                }
                else
                {
                    // Show message with file location if user clicks "No"
                    MessageBox.Show("You can find the report in the Reports/CustomerReports folder.", "Report Location", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                // Log the error
                logger.LogException(currentUserId, ex.Message, ex.StackTrace, Global.sourceId); // Log the error

                // Show error message to the user
                MessageBox.Show("An error occurred while generating the report. Please try again.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }


        }

        private void CustomerReport_Load(object sender, EventArgs e)
        {
            //onload add the documents to the combobox
            //load document names into combobox
            cmbCustomerReports.DataSource = dbContext.Documents
                .Where(d => d.FileTypeId == 1).ToList();
            cmbCustomerReports.DisplayMember = "FileName";
            cmbCustomerReports.ValueMember = "DocumentId";
            cmbCustomerReports.SelectedIndex = -1;
            cmbCustomerReports.Text = "Select a Customer Report";

            isLoaded = true; // Set the flag to true after loading the form

        }

        private async void cmbCustomerReports_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!isLoaded) return; // Prevent action if form is not fully loaded

            // Show spinner  
            progressBar1.Visible = true;
            cmbCustomerReports.Enabled = false;

            // Grab the selected document
            var selectedDoc = cmbCustomerReports.SelectedItem as Document;
            int docId = selectedDoc?.DocumentId ?? 0;

            if (docId > 0)
            {
                // Perform DB and file I/O off the UI thread
                var filePath = await Task.Run(() =>
                {
                    using (var ctx = new RentOpsDBContext())
                    {
                        var d = ctx.Documents.Find(docId);
                        if (d == null) return null;

                        // Create temp file path
                        var tmp = Path.Combine(Path.GetTempPath(), d.FileName + ".pdf");

                        // Ensure file is properly closed before writing
                        using (var fs = new FileStream(tmp, FileMode.Create, FileAccess.Write, FileShare.None))
                        {
                            fs.Write(d.FileData, 0, d.FileData.Length);
                        }

                        return tmp;
                    }
                });

                if (!string.IsNullOrEmpty(filePath))
                {
                    try
                    {
                        await Task.Delay(500); // Small delay to ensure file is ready
                        Process.Start(new ProcessStartInfo
                        {
                            FileName = filePath,
                            UseShellExecute = true,
                            Verb = "open"
                        });
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error opening file: {ex.Message}");
                    }
                }
            }

            // Hide spinner
            progressBar1.Visible = false;
            cmbCustomerReports.Enabled = true;
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            //back to reports screen
            
            Reports screen = new Reports();
            screen.StartPosition = FormStartPosition.CenterScreen; // Center the form
            this.Hide();
            screen.Show();
        }
    }
}
