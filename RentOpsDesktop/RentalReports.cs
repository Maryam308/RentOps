using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.EntityFrameworkCore;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using RentOpsObjects.Model;

namespace RentOpsDesktop
{
    public partial class RentalReports : Form
    {
        RentOpsDBContext dbContext;
        public RentalReports()
        {
            InitializeComponent();
            dbContext = new RentOpsDBContext();
        }

        private void RentalReports_Load(object sender, EventArgs e)
        {
            //load document names into combobox
            cmbRentalReports.DataSource = dbContext.Documents
                .Where(d => d.FileTypeId == 2).ToList();
            cmbRentalReports.DisplayMember = "FileName";
            cmbRentalReports.ValueMember = "DocumentId";
            cmbRentalReports.SelectedIndex = -1;
            cmbRentalReports.Text = "Select a Rental Report";
        }

        private void btnGenerateCustomerReport_Click(object sender, EventArgs e)
        {
            //will generate pdf report about rental history

            //fetch current employee name 
            int employeeID = Global.EmployeeID;
            var employee = dbContext.Users.Find(employeeID);
            string employeeName = employee.FirstName + " " + employee.LastName;


            //create a string for the report header
            string reportHeader = $@"Rental History Report 
        Date:{DateTime.Today.Date}              Generated by: {employeeID} {employeeName} 

";

            //create variables with the required statistics
            int numberOfRentalRequests = dbContext.RentalRequests.Count();
            int numberOfRentalTransactions = dbContext.RentalTransactions.Count();
            int numberOfReturnRecords = dbContext.ReturnRecords.Count();
            int numberOfWebsiteRental = dbContext.RentalTransactions.Where(r => r.UserId != null).Count();
            int numberOfFormApplicationRental = dbContext.RentalTransactions.Where(r => r.UserId == null).Count();
            double rentalsIncome = dbContext.RentalTransactions.Sum(r => r.RentalFee);
            double averageDepositAmount = dbContext.RentalTransactions.Average(r => r.Deposit);

            var mostRentedEquipmentId = dbContext.RentalTransactions
                .GroupBy(r => r.EquipmentId)
                .OrderByDescending(g => g.Count())
                .Select(g => new { EquipmentId = g.Key, Name = g.Count() })
                .FirstOrDefault();

            //fetch the name of the most rented equipment
            var mostRentedEquipment = dbContext.Equipment.Find(mostRentedEquipmentId.EquipmentId);

            var leastRentedEquipmentId = dbContext.RentalTransactions
                .GroupBy(r => r.EquipmentId)
                .OrderBy(g => g.Count())
                .Select(g => new { EquipmentId = g.Key, Name = g.Count() })
                .FirstOrDefault();

            //fetch the name of the least rented equipment
            var leastRentedEquipment = dbContext.Equipment.Find(leastRentedEquipmentId.EquipmentId);


            // Fetch the highly rated equipment ID
            var highlyRatedEquipmentId = dbContext.RentalTransactions
                .Join(dbContext.Feedbacks,
                      rt => rt.RentalTransactionId,
                      f => f.RentalTransactionId,
                      (rt, f) => new { rt.EquipmentId, f.Rating })
                .GroupBy(e => e.EquipmentId)
                .Select(g => new { EquipmentId = g.Key, AverageRating = g.Average(x => x.Rating) })
                .OrderByDescending(e => e.AverageRating)
                .FirstOrDefault(); // Get the highest rated one


            //fetch the name of the highly rated equipment
            var highlyRatedEquipment = dbContext.Equipment.Find(highlyRatedEquipmentId.EquipmentId);

            // Fetch the most common condition status of returned equipment
            var mostCommonConditionStatus = dbContext.ReturnRecords
                .Join(dbContext.ConditionStatuses,
                      rr => rr.ReturnConditionId,
                      e => e.ConditionStatusId,
                      (rr, e) => new { rr.ReturnConditionId })
                .GroupBy(e => e.ReturnConditionId)
                .Select(g => new { ConditionStatusId = g.Key, Count = g.Count() })
                .OrderByDescending(g => g.Count)
                .FirstOrDefault();


            //number of available equipment
            int numberOfAvailableEquipment = dbContext.Equipment
                .Where(e => e.AvailabilityStatusId == 1)
                .Count();
            //number of currently rented equipment
            int numberOfCurrentlyRentedEquipment = dbContext.Equipment
                .Where(e => e.AvailabilityStatusId == 2)
                .Count();

            //longest rental period
            var longestRentalPeriod = dbContext.RentalTransactions
                .OrderByDescending(r => r.ReturnDate.ToDateTime(TimeOnly.MinValue) - r.PickupDate.ToDateTime(TimeOnly.MinValue))
                .Select(r => r.ReturnDate.ToDateTime(TimeOnly.MinValue) - r.PickupDate.ToDateTime(TimeOnly.MinValue))
                .FirstOrDefault();

            //average latency period
            //if the date in return record is higher than the date in rental transaction, then the latency period is the differance between the two dates
            // Calculate the average latency period by days
            var averageLatencyPeriod = dbContext.RentalTransactions
                .Join(dbContext.ReturnRecords,
                      rt => rt.RentalTransactionId,
                      rr => rr.RentalTransactionId,
                      (rt, rr) => new { rt.PickupDate, rr.ActualReturnDate })
                .Select(x => (x.ActualReturnDate.ToDateTime(TimeOnly.MinValue) - x.PickupDate.ToDateTime(TimeOnly.MinValue)).TotalDays)
                .Average();


            //create a string for the report statistics section
            string reportStatistics = $@"
***************************************************************************

Number of rental request: {numberOfRentalRequests}
Number of rental transaction: {numberOfRentalTransactions}
Number of return records: {numberOfReturnRecords}

Number of website rental request: {numberOfWebsiteRental}
Number of form application rentals: {numberOfFormApplicationRental}

Rentals Income: {rentalsIncome}
Average deposit amount: {averageDepositAmount}

Most rented equipment: {mostRentedEquipment}
Least rented equipment: {leastRentedEquipment}
Highly rated equipment: {highlyRatedEquipment}
Equipment Mostly Returned as : {mostCommonConditionStatus}

Number of available equipment: {numberOfAvailableEquipment} 
Number of currently rented equipment: {numberOfCurrentlyRentedEquipment} 

Longest rental period: {longestRentalPeriod}
Average latency period: {averageDepositAmount}

***************************************************************************

";


            //fetching the data for each rental transaction

            //fetch a variable with the rental history including the user customer equipment and rental request payment 
            var rentalHistory = dbContext.RentalTransactions
                .Include(r => r.User)
                .Include(r => r.Equipment)
                .Include(r => r.Customer)
                .Include(r => r.RentalRequest)
                .Include(r => r.Payment)
                .ThenInclude(p => p.PaymentStatus)
                .Include(sp => sp.Payment)
                .ThenInclude(ps => ps.PaymentMethod)
                .Select(r => new
                {
                    RentalTransactionId = r.RentalTransactionId,
                    RentalTransactionTimeStamp = r.RentalTransactionTimestamp,
                    RentedFrom = r.RentalRequestId != null ? "Website" : "Application",

                    RentedTo = r.UserId != null ? r.User.FirstName + " " + r.User.LastName : r.Customer.FirstName + " " + r.Customer.LastName,
                    ContactInformation = r.UserId != null ? r.User.PhoneNumber + " - " + r.User.Email : r.Customer.PhoneNumber + " - " + r.Customer.Email,

                    ApprovedBy = r.Employee.FirstName + " " + r.Employee.LastName,
                    EmployeeEmail = r.Employee.Email,

                    EquipmentName = r.Equipment.EquipmentName,

                    RentalPeriod = r.PickupDate + " -> " + r.ReturnDate,

                    totalamount = r.RentalFee,
                    DepositAmount = r.Deposit,
                    PaymentStatus = r.Payment.PaymentStatus.PaymentStatusTitle,
                    PaymentMethod = r.Payment.PaymentMethod.PaymentMethodTitle,

                })
                .ToList();


            //fetch the return record for each rental transaction if exists
            var rentalHistoryWithReturnRecord = rentalHistory
             .Select(r => new
             {
                 r.RentalTransactionId,
                 r.RentalTransactionTimeStamp,
                 r.RentedFrom,
                 r.RentedTo,
                 r.ContactInformation,
                 r.ApprovedBy,
                 r.EmployeeEmail,
                 r.EquipmentName,
                 r.RentalPeriod,
                 r.totalamount,
                 r.DepositAmount,
                 r.PaymentStatus,
                 r.PaymentMethod,
                 ReturnRecord = dbContext.ReturnRecords
                     .Where(rr => rr.RentalTransactionId == r.RentalTransactionId)
                     .Select(rr => new
                     {
                         rr.ReturnRecordId,
                         rr.ReturnCondition.ConditionStatusTitle,
                         ReturnDate = rr.ActualReturnDate.ToDateTime(TimeOnly.MinValue),
                         rr.LateReturnFee,
                         rr.AdditionalCharge
                     })
                     .FirstOrDefault()
             })
             .ToList();


            //variable to store the filtered rental history based on the user choice
            var filteredRentalHistory = rentalHistoryWithReturnRecord;

            //filter depending on the selected rental history
            if (dtpPeriodStartDate.Checked == false)
            {

                //will filter the rental history to chose last 10 rental transactions
                filteredRentalHistory = rentalHistoryWithReturnRecord
                    .OrderByDescending(r => r.RentalTransactionTimeStamp)
                    .Take(10)
                    .ToList();

            }
            else if (dtpPeriodStartDate.Checked == true)
            {
                //will filter the rentals history to the period starting from the selected date to two weeks after the selected date
                DateTime startDate = dtpPeriodStartDate.Value.Date;
                DateTime endDate = startDate.AddDays(14);
                filteredRentalHistory = rentalHistoryWithReturnRecord
                    .Where(r => r.RentalTransactionTimeStamp >= startDate && r.RentalTransactionTimeStamp <= endDate)
                    .ToList();


            }



            //create a string for the rental history section
            string rentalForEach = "";



            foreach (var rental in filteredRentalHistory)
            {
                rentalForEach += $@"

Rental Transaction ID: {rental.RentalTransactionId}
Rented from (website/application): {rental.RentedFrom}

Rented by: {rental.RentedTo}
	Contact information: {rental.ContactInformation}
Approved by: {rental.ApprovedBy}
	Contact information: {rental.EmployeeEmail}

Rented Equipment: {rental.EquipmentName}
Rental Period: {rental.RentalPeriod}
Total amount: {rental.totalamount}
Deposit amount: {rental.DepositAmount}
Payment status: {rental.PaymentStatus}
Payment method: {rental.PaymentMethod}

 ";


                if (rental.ReturnRecord != null)
                {
                    rentalForEach += $@"Return Record:  
	Return record id: {rental.ReturnRecord.ReturnRecordId}
	Return condition: {rental.ReturnRecord.ConditionStatusTitle}
	Return date: {rental.ReturnRecord.ReturnDate}
	Late return fee: {rental.ReturnRecord.LateReturnFee}
	Additional charge: {rental.ReturnRecord.AdditionalCharge}

***************************************************************************";

                }
                else
                {

                    rentalForEach += $@"Return Record:  No return record found";

                }

                //add the current text to the main string variable for 


            }


            //rental report structure 
            string rentalReport = reportHeader + reportStatistics + rentalForEach;


            //create a pdf document
            PdfDocument document = new PdfDocument();
            //set the document title
            document.Info.Title = "RentalReport";

            //create a pdf page
            PdfPage page = document.AddPage();

            // Get an XGraphics object for drawing
            XGraphics gfx = XGraphics.FromPdfPage(page);

            // Create a font
            XFont font = new XFont("Verdana", 20);

            // Draw the text
            gfx.DrawString(rentalReport, font, XBrushes.Black, new XPoint(40, 50));


            //create a new document object in the database 
            string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

            Document newDocument = new Document();
            newDocument.UploadDate = DateTime.Now;
            newDocument.FileTypeId = 2; //rental report
            newDocument.UserId = employeeID; //current employee

            string filename = Path.Combine("Reports", "RentalReports", $"RentalReport_{timestamp}.pdf");
            newDocument.StoragePath = filename; //path to the document
            newDocument.FileName = $"RentalReport_{timestamp}.pdf"; //name of the document
            newDocument.FileData = File.ReadAllBytes(filename); //file data 
            // Save the document
            document.Save(filename);

            //add the document to the database
            dbContext.Documents.Add(newDocument);
            dbContext.SaveChanges();



        }

        private async void cmbRentalReports_SelectedIndexChanged(object sender, EventArgs e)
        {
            // show spinner  
            progressBar1.Visible = true;
            cmbRentalReports.Enabled = false;

            // grab the selected Id
            var docId = cmbRentalReports.SelectedValue;


            if (docId != null)
            {
                // do the DB + file I/O off the UI thread
                var tuple = await Task.Run(() => {
                    using (var ctx = new RentOpsDBContext())
                    {
                        var d = ctx.Documents.Find(docId);
                        if (d == null) return (string)null;
                        // write to temp file
                        var tmp = Path.Combine(Path.GetTempPath(), d.FileName + ".pdf");
                        File.WriteAllBytes(tmp, d.FileData);
                        return tmp;
                    }
                });

                if (tuple != null)
                {
                    Process.Start(new ProcessStartInfo
                    {
                        FileName = tuple,
                        UseShellExecute = true
                    });
                }
            }

            // hide spinner
            progressBar1.Visible = false;
            cmbRentalReports.Enabled = true;
        }
    }
}
