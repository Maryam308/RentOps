using Microsoft.EntityFrameworkCore;
using RentOpsObjects.Model;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Runtime.InteropServices.JavaScript.JSType;
using PdfSharp.Pdf;
using PdfSharp.Drawing;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.ListView;
using System.Diagnostics;


namespace RentOpsDesktop
{
    public partial class CustomerReport : Form
    {
        RentOpsDBContext dbContext;

        public CustomerReport()
        {
            InitializeComponent();
            dbContext = new RentOpsDBContext();
            
        }

        private void btnGenerateCustomerReport_Click(object sender, EventArgs e)
        {
            //will generate pdf report about customers

            //fetch current employee name 
            int employeeID = Global.EmployeeID;
            var employee = dbContext.Users.Find(employeeID); 
            string employeeName = employee.FirstName + " " + employee.LastName;


            //create a string for the report header
            string reportHeader = $@"Customer Report 
        Date:{DateTime.Today.Date}              Generated by: {employeeID} {employeeName} ";

            //Number of Customers Registered: (count)
            //Number of Customer Feedbacks on Equipment: 

            //fetch statistics from the database
            int numberOfCustomers = dbContext.ExternalCustomers.Count() + dbContext.Users.Where(i=> i.RoleId == 3).Count();
            int numberOfCustomerFeedbacks = dbContext.Feedbacks.Count();


            //create a string for the report all customers section
            string reportAllCustomers = $@"All Customers
***************************************************************************

Total Number of Registered Customers: {numberOfCustomers}
Number of Customer Feedbacks on Equipment: {numberOfCustomerFeedbacks}
";

            //create a string for the report (each customer) section
            string reportCustomerDetails = $@"Customer Details
***************************************************************************

";

            //external customers loop
            foreach (var customer in dbContext.ExternalCustomers)
            {
                //add the customer details to the report
                reportCustomerDetails += $@"Customer ID: {customer.CustomerId}  
Customer Name: {customer.FirstName + " " + customer.LastName}  
Email: {customer.Email}  
Phone Number: {customer.PhoneNumber}
";
                //add the customer rental details to the report 

                //fetch the customer rental statistics
                //int numberOfRentalRequests = dbContext.RentalTransactions.Where(i => i.CustomerId == customer.CustomerId).Count();

                int numberOfRentalTransactions = dbContext.RentalTransactions.Where(i => i.CustomerId == customer.CustomerId).Count();

                int numberOfReturnRecords = dbContext.ReturnRecords
                    .Include(r => r.RentalTransaction)
                    .Where(r => r.RentalTransaction.CustomerId == customer.CustomerId)
                    .Count();

                int numberOfActiveRentals = dbContext.RentalTransactions.Where(i => i.CustomerId == customer.CustomerId && i.PickupDate <= DateOnly.FromDateTime(DateTime.Today.Date) && i.ReturnDate >= DateOnly.FromDateTime(DateTime.Today.Date)).Count();

                int numberOfLateReturns = dbContext.ReturnRecords
                    .Include(r => r.RentalTransaction)
                    .Where(r => r.RentalTransaction.CustomerId == customer.CustomerId && r.LateReturnFee != 0)
                    .Count();

                int numberOfDamagedReturns = dbContext.ReturnRecords
                    .Include(r => r.RentalTransaction)
                    .Where(r => r.RentalTransaction.CustomerId == customer.CustomerId && r.ReturnConditionId == 2).Count();

                int numberOfBrokenReturns = dbContext.ReturnRecords
                    .Include(r => r.RentalTransaction)
                    .Where(r => r.RentalTransaction.CustomerId == customer.CustomerId && r.ReturnConditionId == 3).Count();

                int numberOfLostReturns = dbContext.ReturnRecords
                    .Include(r => r.RentalTransaction)
                    .Where(r => r.RentalTransaction.CustomerId == customer.CustomerId && r.ReturnConditionId == 4).Count();

                //add the customer rental details to the report
                reportCustomerDetails += $@"
Number of Rental Transactions: {numberOfRentalTransactions}
Number of Return Records: {numberOfReturnRecords}
Number of Active Rentals: {numberOfActiveRentals}
Number of Late Returns: {numberOfLateReturns}
Number of Damaged Returns: {numberOfDamagedReturns}
Number of Broken Returns: {numberOfBrokenReturns}
Number of Lost Returns: {numberOfLostReturns}


***************************************************************************

";

            }

            //Website customers loop
            foreach (var customer in dbContext.Users.Where(u => u.RoleId == 3))
            {
                //add the customer details to the report
                reportCustomerDetails += $@"Customer ID: {customer.UserId}  
Customer Name: {customer.FirstName + " " + customer.LastName}  
Email: {customer.Email}  
Phone Number: {customer.PhoneNumber}
";
                //add the customer rental details to the report 

                //fetch the customer rental statistics
                int numberOfRentalRequests = dbContext.RentalRequests
                    .Where(i => i.UserId == customer.UserId).Count();

                int numberOfRentalTransactions = dbContext.RentalTransactions
                    .Include(r => r.RentalRequest)
                    .Where(i => i.RentalRequest.UserId == customer.UserId).Count();

                int numberOfReturnRecords = dbContext.ReturnRecords
                    .Include(r => r.RentalTransaction)
                    .Where(r => r.RentalTransaction.CustomerId == customer.UserId)
                    .Count();

                int numberOfActiveRentals = dbContext.RentalTransactions
                    .Include(r => r.RentalRequest)
                    .Where(i => i.RentalRequest.UserId == customer.UserId && i.PickupDate <= DateOnly.FromDateTime(DateTime.Today.Date) && i.ReturnDate >= DateOnly.FromDateTime(DateTime.Today.Date)).Count();

                int numberOfLateReturns = dbContext.ReturnRecords
                    .Include(r => r.RentalTransaction)
                    .ThenInclude(r => r.RentalRequest)
                    .Where(r => r.RentalTransaction.RentalRequest.UserId == customer.UserId && r.LateReturnFee != 0)
                    .Count();

                int numberOfDamagedReturns = dbContext.ReturnRecords
                    .Include(r => r.RentalTransaction)
                    .ThenInclude(r => r.RentalRequest)
                    .Where(r => r.RentalTransaction.RentalRequest.UserId == customer.UserId && r.ReturnConditionId == 2).Count();

                int numberOfBrokenReturns = dbContext.ReturnRecords
                    .Include(r => r.RentalTransaction)
                    .ThenInclude(r => r.RentalRequest)
                    .Where(r => r.RentalTransaction.RentalRequest.UserId == customer.UserId && r.ReturnConditionId == 3).Count();

                int numberOfLostReturns = dbContext.ReturnRecords
                    .Include(r => r.RentalTransaction)
                    .ThenInclude(r => r.RentalRequest)
                    .Where(r => r.RentalTransaction.RentalRequest.UserId == customer.UserId && r.ReturnConditionId == 4).Count();

                //add the customer rental details to the report
                reportCustomerDetails += $@"
Number of Rental Requests: {numberOfRentalRequests}
Number of Rental Transactions: {numberOfRentalTransactions}
Number of Return Records: {numberOfReturnRecords}
Number of Active Rentals: {numberOfActiveRentals}
Number of Late Returns: {numberOfLateReturns}
Number of Damaged Returns: {numberOfDamagedReturns}
Number of Broken Returns: {numberOfBrokenReturns}
Number of Lost Returns: {numberOfLostReturns}


***************************************************************************

";

            }


            //create a string for the report full structured body
            string reportBody = reportHeader + reportAllCustomers + reportCustomerDetails;

            //create a pdf document
            PdfDocument document = new PdfDocument();
            //set the document title
            document.Info.Title = "CustomerReport";

            //create a pdf page
            PdfPage page = document.AddPage();

            // Get an XGraphics object for drawing
            XGraphics gfx = XGraphics.FromPdfPage(page);

            // Create a font
            XFont font = new XFont("Verdana", 20);

            // Draw the text
            gfx.DrawString(reportBody, font, XBrushes.Black, new XPoint(40, 50));


            //create a new document object in the database 
            string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

            Document newDocument = new Document();
            newDocument.UploadDate = DateTime.Now;
            newDocument.FileTypeId = 1; //customer report
            newDocument.UserId = employeeID; //current employee
            
            string filename = Path.Combine("Reports", "CustomerReports", $"CustomerReport_{timestamp}.pdf");
            newDocument.StoragePath = filename; //path to the document
            newDocument.FileName = $"CustomerReport_{timestamp}.pdf"; //name of the document
            newDocument.FileData = File.ReadAllBytes(filename); //file data 
            // Save the document
            document.Save(filename);

            //add the document to the database
            dbContext.Documents.Add(newDocument);
            dbContext.SaveChanges();



        }
    }
}
