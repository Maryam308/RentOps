using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.EntityFrameworkCore;
using PdfSharp.Drawing;
using PdfSharp.Drawing.Layout;
using PdfSharp.Pdf;
using RentOpsObjects.Model;

namespace RentOpsDesktop
{
    public partial class RentalReports : Form
    {
        RentOpsDBContext dbContext;
        public RentalReports()
        {
            InitializeComponent();
            dbContext = new RentOpsDBContext();
        }

        private void RentalReports_Load(object sender, EventArgs e)
        {
            //load document names into combobox
            cmbRentalReports.DataSource = dbContext.Documents
                .Where(d => d.FileTypeId == 2).ToList();
            cmbRentalReports.DisplayMember = "FileName";
            cmbRentalReports.ValueMember = "DocumentId";
            cmbRentalReports.SelectedIndex = -1;
            cmbRentalReports.Text = "Select a Rental Report";
        }

        private void btnGenerateRentalReport_Click(object sender, EventArgs e)
        {
            try
            {
                //will generate pdf report about rental history

                //fetch current employee name 
                //int employeeID = Global.EmployeeID;
                //var employee = dbContext.Users.Find(employeeID);
                //string employeeName = employee.FirstName + " " + employee.LastName;

                int employeeID = 2;
                string employeeName = "mohammed";

                //create a string for the report header
                string reportHeaderBlock = $@"Rental History Report

Date:{DateTime.Today.Date}              Generated by: {employeeID} {employeeName}

";

                //create variables with the required statistics
                int numberOfRentalRequests = dbContext.RentalRequests.Count();
                int numberOfRentalTransactions = dbContext.RentalTransactions.Count();
                int numberOfReturnRecords = dbContext.ReturnRecords.Count();
                int numberOfWebsiteRental = dbContext.RentalTransactions.Where(r => r.UserId != null).Count();
                int numberOfFormApplicationRental = dbContext.RentalTransactions.Where(r => r.UserId == null).Count();
                double rentalsIncome = dbContext.RentalTransactions.Any() ? dbContext.RentalTransactions.Sum(r => r.RentalFee) : 0;
                double averageDepositAmount = dbContext.RentalTransactions.Any() ? dbContext.RentalTransactions.Average(r => r.Deposit) : 0;

                var mostRentedEquipmentId = dbContext.RentalTransactions.Any()
                    ? dbContext.RentalTransactions.GroupBy(r => r.EquipmentId).OrderByDescending(g => g.Count()).Select(g => g.Key).FirstOrDefault()
                    : (int?)null;

                var mostRentedEquipment = mostRentedEquipmentId.HasValue ? dbContext.Equipment.Find(mostRentedEquipmentId)?.EquipmentName ?? "N/A" : "N/A";

                var leastRentedEquipmentId = dbContext.RentalTransactions.Any()
                    ? dbContext.RentalTransactions.GroupBy(r => r.EquipmentId).OrderBy(g => g.Count()).Select(g => g.Key).FirstOrDefault()
                    : (int?)null;

                var leastRentedEquipment = leastRentedEquipmentId.HasValue ? dbContext.Equipment.Find(leastRentedEquipmentId)?.EquipmentName ?? "N/A" : "N/A";

                var highlyRatedEquipmentId = dbContext.Feedbacks.Any()
                    ? dbContext.RentalTransactions
                        .Join(dbContext.Feedbacks, rt => rt.RentalTransactionId, f => f.RentalTransactionId, (rt, f) => new { rt.EquipmentId, f.Rating })
                        .GroupBy(e => e.EquipmentId)
                        .Select(g => new { EquipmentId = g.Key, AverageRating = g.Average(x => x.Rating) })
                        .OrderByDescending(e => e.AverageRating)
                        .Select(e => e.EquipmentId)
                        .FirstOrDefault()
                    : (int?)null;

                var highlyRatedEquipment = highlyRatedEquipmentId.HasValue ? dbContext.Equipment.Find(highlyRatedEquipmentId)?.EquipmentName ?? "N/A" : "N/A";

                var mostCommonConditionStatusId = dbContext.ReturnRecords.Any()
                    ? dbContext.ReturnRecords.GroupBy(e => e.ReturnConditionId).Select(g => new { ConditionStatusId = g.Key, Count = g.Count() }).OrderByDescending(g => g.Count).Select(g => g.ConditionStatusId).FirstOrDefault()
                    : (int?)null;

                var mostCommonConditionStatus = mostCommonConditionStatusId.HasValue ? dbContext.ConditionStatuses.Find(mostCommonConditionStatusId)?.ConditionStatusTitle ?? "N/A" : "N/A";

                int numberOfAvailableEquipment = dbContext.Equipment.Where(e => e.AvailabilityStatusId == 1).Count();
                int numberOfCurrentlyRentedEquipment = dbContext.Equipment.Where(e => e.AvailabilityStatusId == 2).Count();

                var longestRentalPeriod = dbContext.RentalTransactions.Any()
                    ? dbContext.RentalTransactions.OrderByDescending(r => r.ReturnDate.ToDateTime(TimeOnly.MinValue) - r.PickupDate.ToDateTime(TimeOnly.MinValue)).Select(r => r.ReturnDate.ToDateTime(TimeOnly.MinValue) - r.PickupDate.ToDateTime(TimeOnly.MinValue)).FirstOrDefault()
                    : TimeSpan.Zero;

                var averageLatencyPeriod = dbContext.ReturnRecords.Any()
                    ? dbContext.RentalTransactions
                        .Join(dbContext.ReturnRecords, rt => rt.RentalTransactionId, rr => rr.RentalTransactionId, (rt, rr) => (rr.ActualReturnDate.ToDateTime(TimeOnly.MinValue) - rt.PickupDate.ToDateTime(TimeOnly.MinValue)).TotalDays)
                        .Average()
                    : 0;

                //create a string for the report statistics section
                string reportStatisticsBlock = $@"
*************************

Number of rental request: {numberOfRentalRequests}
Number of rental transaction: {numberOfRentalTransactions}
Number of return records: {numberOfReturnRecords}

Number of website rental request: {numberOfWebsiteRental}
Number of form application rentals: {numberOfFormApplicationRental}

Rentals Income: {rentalsIncome}
Average deposit amount: {averageDepositAmount}

Most rented equipment: {mostRentedEquipment}
Least rented equipment: {leastRentedEquipment}
Highly rated equipment: {highlyRatedEquipment}
Equipment Mostly Returned as : {mostCommonConditionStatus}

Number of available equipment: {numberOfAvailableEquipment} 
Number of currently rented equipment: {numberOfCurrentlyRentedEquipment} 

Longest rental period: {longestRentalPeriod}
Average latency period: {averageLatencyPeriod}

*************************

";

                // Prepare block-wise rental history
                List<string> rentalHistoryBlocks = new List<string>();

                // Add header and statistics as first block
                rentalHistoryBlocks.Add(reportHeaderBlock + reportStatisticsBlock);

                var rentalHistory = dbContext.RentalTransactions
                    .Include(r => r.User)
                    .Include(r => r.Equipment)
                    .Include(r => r.Customer)
                    .Include(r => r.RentalRequest)
                    .Include(r => r.Payment)
                        .ThenInclude(p => p.PaymentStatus)
                    .Include(sp => sp.Payment)
                        .ThenInclude(ps => ps.PaymentMethod)
                    .ToList();

                foreach (var r in rentalHistory)
                {
                    var returnRecord = dbContext.ReturnRecords
                        .Where(rr => rr.RentalTransactionId == r.RentalTransactionId)
                        .Include(rr => rr.ReturnCondition)
                        .FirstOrDefault();

                    string block = $@"

Rental Transaction ID: {r.RentalTransactionId}
Rented from (website/application): {(r.RentalRequestId != null ? "Website" : "Application")}

Rented by: {(r.UserId != null ? r.User.FirstName + " " + r.User.LastName : r.Customer.FirstName + " " + r.Customer.LastName)}
	Contact information: {(r.UserId != null ? r.User.PhoneNumber + " - " + r.User.Email : r.Customer.PhoneNumber + " - " + r.Customer.Email)}
Approved by: {r.Employee.FirstName + " " + r.Employee.LastName}
	Contact information: {r.Employee.Email}

Rented Equipment: {r.Equipment.EquipmentName}
Rental Period: {r.PickupDate} -> {r.ReturnDate}
Total amount: {r.RentalFee}
Deposit amount: {r.Deposit}
Payment status: {r.Payment.PaymentStatus.PaymentStatusTitle}
Payment method: {r.Payment.PaymentMethod.PaymentMethodTitle}

";

                    if (returnRecord != null)
                    {
                        block += $@"Return Record:  
	Return record id: {returnRecord.ReturnRecordId}
	Return condition: {returnRecord.ReturnCondition.ConditionStatusTitle}
	Return date: {returnRecord.ActualReturnDate.ToDateTime(TimeOnly.MinValue)}
	Late return fee: {returnRecord.LateReturnFee}
	Additional charge: {returnRecord.AdditionalCharge}

*************************";
                    }
                    else
                    {
                        block += $@"Return Record:  No return record found
*************************";
                    }

                    rentalHistoryBlocks.Add(block);
                }

                // PDF generation
                PdfDocument document = new PdfDocument();
                document.Info.Title = "RentalReport";

                XFont font = new XFont("Verdana", 12);
                double marginTop = 50;
                double marginLeft = 40;
                double marginRight = 40;
                double marginBottom = 50;

                double yPoint = marginTop;
                double lineHeight = font.GetHeight();

                PdfPage page = document.AddPage();
                XGraphics gfx = XGraphics.FromPdfPage(page);
                XTextFormatter tf = new XTextFormatter(gfx);

                foreach (var block in rentalHistoryBlocks)
                {
                    int blockLines = block.Split('\n').Length;
                    double blockHeight = blockLines * lineHeight;

                    if (yPoint + blockHeight > page.Height - marginBottom)
                    {
                        page = document.AddPage();
                        gfx = XGraphics.FromPdfPage(page);
                        tf = new XTextFormatter(gfx);
                        yPoint = marginTop;
                    }

                    tf.DrawString(block, font, XBrushes.Black, new XRect(marginLeft, yPoint, page.Width - marginLeft - marginRight, page.Height - marginBottom), XStringFormats.TopLeft);
                    yPoint += blockHeight;
                }

                string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");

                Document newDocument = new Document();
                newDocument.UploadDate = DateTime.Now;
                newDocument.FileTypeId = 2; //rental report
                newDocument.UserId = employeeID; //current employee

                string baseDir = AppDomain.CurrentDomain.BaseDirectory;

                string projectRoot = Path.Combine(baseDir, @"..\..\..");

                string folderPath = Path.GetFullPath(Path.Combine(projectRoot, "Reports", "RentalReports"));

                Directory.CreateDirectory(folderPath);


                string relativePath = Path.Combine("Reports", "RentalReports", $"RentalReport_{timestamp}.pdf");

                string filename = Path.Combine(folderPath, $"RentalReport_{timestamp}.pdf");
                

                document.Save(filename);
                newDocument.StoragePath = relativePath; //path to the document
                newDocument.FileName = $"RentalReport_{timestamp}.pdf"; //name of the document
                newDocument.FileData = File.ReadAllBytes(filename); //file data 

                dbContext.Documents.Add(newDocument);
                dbContext.SaveChanges();

                // Show custom dialog with Open option
                DialogResult result = MessageBox.Show("Rental history report has been generated successfully!\n\nDo you want to open the file now?", "Report Created", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (result == DialogResult.Yes)
                {
                    System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo()
                    {
                        FileName = filename,
                        UseShellExecute = true
                    });
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred: {ex}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        


        }

        private async void cmbRentalReports_SelectedIndexChanged(object sender, EventArgs e)
        {
            //// show spinner  
            //progressBar1.Visible = true;
            //cmbRentalReports.Enabled = false;

            //// grab the selected Id
            //var docId = cmbRentalReports.SelectedValue;


            //if (docId != null)
            //{
            //    // do the DB + file I/O off the UI thread
            //    var tuple = await Task.Run(() => {
            //        using (var ctx = new RentOpsDBContext())
            //        {
            //            var d = ctx.Documents.Find(docId);
            //            if (d == null) return (string)null;
            //            // write to temp file
            //            var tmp = Path.Combine(Path.GetTempPath(), d.FileName + ".pdf");
            //            File.WriteAllBytes(tmp, d.FileData);
            //            return tmp;
            //        }
            //    });

            //    if (tuple != null)
            //    {
            //        Process.Start(new ProcessStartInfo
            //        {
            //            FileName = tuple,
            //            UseShellExecute = true
            //        });
            //    }
            //}

            //// hide spinner
            //progressBar1.Visible = false;
            //cmbRentalReports.Enabled = true;
        }
    }
}
